{"/home/travis/build/npmtest/node-npmtest-ifvisible.js/test.js":"/* istanbul instrument in package npmtest_ifvisible_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ifvisible.js/lib.npmtest_ifvisible.js.js":"/* istanbul instrument in package npmtest_ifvisible_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ifvisible_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ifvisible_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ifvisible.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ifvisible.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ifvisible_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ifvisible_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ifvisible_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ifvisible_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ifvisible_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ifvisible_js.__dirname + '/lib.npmtest_ifvisible_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ifvisible.js/node_modules/ifvisible.js/src/ifvisible.js":"(function() {\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define(function() {\n        return factory();\n      });\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.ifvisible = factory();\n    }\n  })(this, function() {\n    var addEvent, customEvent, doc, fireEvent, hidden, idleStartedTime, idleTime, ie, ifvisible, init, initialized, status, trackIdleStatus, visibilityChange;\n    ifvisible = {};\n    doc = document;\n    initialized = false;\n    status = \"active\";\n    idleTime = 60000;\n    idleStartedTime = false;\n    customEvent = (function() {\n      var S4, addCustomEvent, cgid, fireCustomEvent, guid, listeners, removeCustomEvent;\n      S4 = function() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n      };\n      guid = function() {\n        return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\n      };\n      listeners = {};\n      cgid = '__ceGUID';\n      addCustomEvent = function(obj, event, callback) {\n        obj[cgid] = undefined;\n        if (!obj[cgid]) {\n          obj[cgid] = \"ifvisible.object.event.identifier\";\n        }\n        if (!listeners[obj[cgid]]) {\n          listeners[obj[cgid]] = {};\n        }\n        if (!listeners[obj[cgid]][event]) {\n          listeners[obj[cgid]][event] = [];\n        }\n        return listeners[obj[cgid]][event].push(callback);\n      };\n      fireCustomEvent = function(obj, event, memo) {\n        var ev, j, len, ref, results;\n        if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {\n          ref = listeners[obj[cgid]][event];\n          results = [];\n          for (j = 0, len = ref.length; j < len; j++) {\n            ev = ref[j];\n            results.push(ev(memo || {}));\n          }\n          return results;\n        }\n      };\n      removeCustomEvent = function(obj, event, callback) {\n        var cl, i, j, len, ref;\n        if (callback) {\n          if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {\n            ref = listeners[obj[cgid]][event];\n            for (i = j = 0, len = ref.length; j < len; i = ++j) {\n              cl = ref[i];\n              if (cl === callback) {\n                listeners[obj[cgid]][event].splice(i, 1);\n                return cl;\n              }\n            }\n          }\n        } else {\n          if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {\n            return delete listeners[obj[cgid]][event];\n          }\n        }\n      };\n      return {\n        add: addCustomEvent,\n        remove: removeCustomEvent,\n        fire: fireCustomEvent\n      };\n    })();\n    addEvent = (function() {\n      var setListener;\n      setListener = false;\n      return function(el, ev, fn) {\n        if (!setListener) {\n          if (el.addEventListener) {\n            setListener = function(el, ev, fn) {\n              return el.addEventListener(ev, fn, false);\n            };\n          } else if (el.attachEvent) {\n            setListener = function(el, ev, fn) {\n              return el.attachEvent('on' + ev, fn, false);\n            };\n          } else {\n            setListener = function(el, ev, fn) {\n              return el['on' + ev] = fn;\n            };\n          }\n        }\n        return setListener(el, ev, fn);\n      };\n    })();\n    fireEvent = function(element, event) {\n      var evt;\n      if (doc.createEventObject) {\n        return element.fireEvent('on' + event, evt);\n      } else {\n        evt = doc.createEvent('HTMLEvents');\n        evt.initEvent(event, true, true);\n        return !element.dispatchEvent(evt);\n      }\n    };\n    ie = (function() {\n      var all, check, div, undef, v;\n      undef = void 0;\n      v = 3;\n      div = doc.createElement(\"div\");\n      all = div.getElementsByTagName(\"i\");\n      check = function() {\n        return (div.innerHTML = \"<!--[if gt IE \" + (++v) + \"]><i></i><![endif]-->\", all[0]);\n      };\n      while (check()) {\n        continue;\n      }\n      if (v > 4) {\n        return v;\n      } else {\n        return undef;\n      }\n    })();\n    hidden = false;\n    visibilityChange = void 0;\n    if (typeof doc.hidden !== \"undefined\") {\n      hidden = \"hidden\";\n      visibilityChange = \"visibilitychange\";\n    } else if (typeof doc.mozHidden !== \"undefined\") {\n      hidden = \"mozHidden\";\n      visibilityChange = \"mozvisibilitychange\";\n    } else if (typeof doc.msHidden !== \"undefined\") {\n      hidden = \"msHidden\";\n      visibilityChange = \"msvisibilitychange\";\n    } else if (typeof doc.webkitHidden !== \"undefined\") {\n      hidden = \"webkitHidden\";\n      visibilityChange = \"webkitvisibilitychange\";\n    }\n    trackIdleStatus = function() {\n      var timer, wakeUp;\n      timer = false;\n      wakeUp = function() {\n        clearTimeout(timer);\n        if (status !== \"active\") {\n          ifvisible.wakeup();\n        }\n        idleStartedTime = +(new Date());\n        return timer = setTimeout(function() {\n          if (status === \"active\") {\n            return ifvisible.idle();\n          }\n        }, idleTime);\n      };\n      wakeUp();\n      addEvent(doc, \"mousemove\", wakeUp);\n      addEvent(doc, \"keyup\", wakeUp);\n      addEvent(doc, \"touchstart\", wakeUp);\n      addEvent(window, \"scroll\", wakeUp);\n      ifvisible.focus(wakeUp);\n      return ifvisible.wakeup(wakeUp);\n    };\n    init = function() {\n      var blur;\n      if (initialized) {\n        return true;\n      }\n      if (hidden === false) {\n        blur = \"blur\";\n        if (ie < 9) {\n          blur = \"focusout\";\n        }\n        addEvent(window, blur, function() {\n          return ifvisible.blur();\n        });\n        addEvent(window, \"focus\", function() {\n          return ifvisible.focus();\n        });\n      } else {\n        addEvent(doc, visibilityChange, function() {\n          if (doc[hidden]) {\n            return ifvisible.blur();\n          } else {\n            return ifvisible.focus();\n          }\n        }, false);\n      }\n      initialized = true;\n      return trackIdleStatus();\n    };\n    ifvisible = {\n      setIdleDuration: function(seconds) {\n        return idleTime = seconds * 1000;\n      },\n      getIdleDuration: function() {\n        return idleTime;\n      },\n      getIdleInfo: function() {\n        var now, res;\n        now = +(new Date());\n        res = {};\n        if (status === \"idle\") {\n          res.isIdle = true;\n          res.idleFor = now - idleStartedTime;\n          res.timeLeft = 0;\n          res.timeLeftPer = 100;\n        } else {\n          res.isIdle = false;\n          res.idleFor = now - idleStartedTime;\n          res.timeLeft = (idleStartedTime + idleTime) - now;\n          res.timeLeftPer = (100 - (res.timeLeft * 100 / idleTime)).toFixed(2);\n        }\n        return res;\n      },\n      focus: function(callback) {\n        if (typeof callback === \"function\") {\n          this.on(\"focus\", callback);\n        } else {\n          status = \"active\";\n          customEvent.fire(this, \"focus\");\n          customEvent.fire(this, \"wakeup\");\n          customEvent.fire(this, \"statusChanged\", {\n            status: status\n          });\n        }\n        return this;\n      },\n      blur: function(callback) {\n        if (typeof callback === \"function\") {\n          this.on(\"blur\", callback);\n        } else {\n          status = \"hidden\";\n          customEvent.fire(this, \"blur\");\n          customEvent.fire(this, \"idle\");\n          customEvent.fire(this, \"statusChanged\", {\n            status: status\n          });\n        }\n        return this;\n      },\n      idle: function(callback) {\n        if (typeof callback === \"function\") {\n          this.on(\"idle\", callback);\n        } else {\n          status = \"idle\";\n          customEvent.fire(this, \"idle\");\n          customEvent.fire(this, \"statusChanged\", {\n            status: status\n          });\n        }\n        return this;\n      },\n      wakeup: function(callback) {\n        if (typeof callback === \"function\") {\n          this.on(\"wakeup\", callback);\n        } else {\n          status = \"active\";\n          customEvent.fire(this, \"wakeup\");\n          customEvent.fire(this, \"statusChanged\", {\n            status: status\n          });\n        }\n        return this;\n      },\n      on: function(name, callback) {\n        init();\n        customEvent.add(this, name, callback);\n        return this;\n      },\n      off: function(name, callback) {\n        init();\n        customEvent.remove(this, name, callback);\n        return this;\n      },\n      onEvery: function(seconds, callback) {\n        var paused, t;\n        init();\n        paused = false;\n        if (callback) {\n          t = setInterval(function() {\n            if (status === \"active\" && paused === false) {\n              return callback();\n            }\n          }, seconds * 1000);\n        }\n        return {\n          stop: function() {\n            return clearInterval(t);\n          },\n          pause: function() {\n            return paused = true;\n          },\n          resume: function() {\n            return paused = false;\n          },\n          code: t,\n          callback: callback\n        };\n      },\n      now: function(check) {\n        init();\n        return status === (check || \"active\");\n      }\n    };\n    return ifvisible;\n  });\n\n}).call(this);\n\n//# sourceMappingURL=ifvisible.js.map\n","/home/travis/build/npmtest/node-npmtest-ifvisible.js/node_modules/ifvisible.js/Gruntfile.js":"module.exports = function(grunt) {\n\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n\n        watch: {\n            coffee: {\n                files: ['src/*.coffee'],\n                tasks: ['coffee:compile'],\n                options: {\n                    spawn: false,\n                    interrupt: true\n                }\n            }\n        },\n\n        coffee: {\n            compile: {\n                options: {\n                    sourceMap: true\n                },\n                files: {\n                    'src/ifvisible.js': 'src/ifvisible.coffee'\n                }\n            }\n        },\n\n        uglify: {\n            build: {\n                files: {\n                    'src/ifvisible.min.js': ['src/ifvisible.js']\n                }\n            }\n        },\n\n        docco: {\n          build: {\n            src: ['src/ifvisible.coffee'],\n            options: {\n              output: 'docs/'\n            }\n          }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-coffee');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-docco');\n\n    grunt.registerTask('default', function (spec) {\n        grunt.task.run(['coffee:compile', 'uglify:build', 'docco:build']);\n    });\n};\n"}